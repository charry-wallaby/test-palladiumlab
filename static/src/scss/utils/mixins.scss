@function rem($pixels, $context: $main-font-size) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    @return calc($pixels / $context) * 1rem;
}
@function em($pixels, $context: $main-font-size) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    @return calc($pixels / $context) * 1em;
}

@function vw($px-vw, $base-vw: 1440px) {
    @return calc(calc($px-vw * 100vw) / $base-vw);
}

@function vh($height, $base-vh: 800px) {
    @return calc(calc($height/$base-vh * 100vh) * 1);
}

@function vwm($px-vw, $base-vw: 375px) {
    @return calc(calc($px-vw * 100vw) / $base-vw);
}

@mixin r($width) {
    @media only screen and (max-width: #{$width}px) {
        @content;
    }
}

@mixin rmin($width) {
    @media only screen and (min-width: #{$width}px) {
        @content;
    }
}

@mixin rIn($width, $width2) {
    @media (min-width: #{$width}px) and (max-width: #{$width2}px) {
        @content;
    }
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content
    }

    &:-moz-placeholder {
        @content
    }

    &::-moz-placeholder {
        @content
    }

    &:-ms-input-placeholder {
        @content
    }
}

@mixin aspect-ratio($w, $h, $pseudo: false) {

    $padding: unquote(calc($h / $w) * 100 + '%');
    position: relative;

    @if $pseudo {
        &::before {
            content: "";
            display: block;
            width: 100%;
            padding-top: $padding;
        }
    }

    @else {
        padding-top: $padding;
    }

    @supports (aspect-ratio: 1 / 1) {
        aspect-ratio: unquote("#{$w} / #{$h}");

        @if $pseudo {
            &::before {
                padding-top: initial;
                display: initial;
                width: initial;
            }
        }

        @else {
            padding-top: initial;
        }
    }

}

@mixin hover {
    .no-touch &:hover {
        @content
    }
}

@mixin css-lock($min-size: 1, $max-size: 1.4, $min-width: 20, $max-width: 100, $property: font-size, $unit: px) {
    #{$property}: #{$max-size}#{$unit};
    #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$max-width} - #{$min-width})));

    @media (max-width: #{$min-width}#{$unit}) {
        #{$property}: #{$min-size}#{$unit}
    }

    @media (min-width: #{$max-width}#{$unit}) {
        #{$property}: #{$max-size}#{$unit}
    }
}

@mixin underlineOnHover($param: 1px) {
    position: relative;
    text-decoration: none;

    &::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 1px;
        bottom: 0;
        left: 0;
        background-color: currentColor;
        transform: translateY(3px);
        transition: $transition-base;
        backface-visibility: hidden;
        opacity: 0;
        pointer-events: none;
    }

    .no-touch &:hover {
        text-decoration: none;

        &::after {
            content: '';
            transform: translateY(0);
            opacity: 1;
        }
    }
}

@mixin underlineHideOnHover($param: 1px) {
    position: relative;
    overflow: hidden;
    text-decoration: none;
    display: inline-block;

    &::after {
        content: '';
        position: absolute;
        width: 100%;
        height: $param;
        background-color: currentColor;
        left: 0;
        bottom: 0;
    }

    .no-touch &:hover {
        &::after {
            animation: underline-hidden 0.6s cubic-bezier(0.445, 0.050, 0.550, 0.950) both;
        }
    }
}

@mixin colorSvgOnHover($color) {
    svg {
        fill: currentColor;
        transition: fill $transition-base;
    }

    .no-touch &:hover {
        svg {
            fill: $color;
        }
    }
}

@mixin headingLine {
    position: relative;

    &::before {
        display: none;
        content: '';
        position: absolute;
        height: 1px;
        top: 50%;
        background-color: currentColor;
        transform: translateY(-50%);
    
        @include rmin(992) {
            display: block;
            width: rem(20, 14);
            left: rem(-40, 14);
        }
    
        @include rmin(1136) {
            width: rem(40, 14);
            left: rem(-80, 14);
        }
    }

}

%antialias {
    font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
}

%overlay {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: inherit;
}

%overlay-full {
    @extend %overlay;
    width: 100%;
    height: 100%;
}

%reset-btn {
    border: 0;
    border-radius: 0;
    box-shadow: none;
    background: none;
    padding: 0;
    margin: 0;
    outline: none;
    text-decoration: none;
    cursor: pointer;
    text-align: center;
    -webkit-appearance: none;
    -moz-appearance: none;
}

%reset-list {
    padding: 0;
    margin: 0;
    list-style: none;
}